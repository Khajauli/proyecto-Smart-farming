"use strict";

Object.defineProperty(exports, "__esModule", { value: true });

var bson_1 = require("bson");

Object.defineProperty(exports, "Binary", { enumerable: true, get: function () { return bson_1.Binary; } });
Object.defineProperty(exports, "BSON", { enumerable: true, get: function () { return bson_1.BSON; } });
Object.defineProperty(exports, "BSONRegExp", { enumerable: true, get: function () { return bson_1.BSONRegExp; } });
Object.defineProperty(exports, "BSONSymbol", { enumerable: true, get: function () { return bson_1.BSONSymbol; } });
Object.defineProperty(exports, "BSONType", { enumerable: true, get: function () { return bson_1.BSONType; } });
Object.defineProperty(exports, "calculateObjectSize", { enumerable: true, get: function () { return bson_1.calculateObjectSize; } });
Object.defineProperty(exports, "Code", { enumerable: true, get: function () { return bson_1.Code; } });
Object.defineProperty(exports, "DBRef", { enumerable: true, get: function () { return bson_1.DBRef; } });
Object.defineProperty(exports, "Decimal128", { enumerable: true, get: function () { return bson_1.Decimal128; } });
Object.defineProperty(exports, "deserialize", { enumerable: true, get: function () { return bson_1.deserialize; } });
Object.defineProperty(exports, "Double", { enumerable: true, get: function () { return bson_1.Double; } });
Object.defineProperty(exports, "EJSON", { enumerable: true, get: function () { return bson_1.EJSON; } });
Object.defineProperty(exports, "Int32", { enumerable: true, get: function () { return bson_1.Int32; } });
Object.defineProperty(exports, "Long", { enumerable: true, get: function () { return bson_1.Long; } });
Object.defineProperty(exports, "MaxKey", { enumerable: true, get: function () { return bson_1.MaxKey; } });
Object.defineProperty(exports, "MinKey", { enumerable: true, get: function () { return bson_1.MinKey; } });
Object.defineProperty(exports, "ObjectId", { enumerable: true, get: function () { return bson_1.ObjectId; } });
Object.defineProperty(exports, "serialize", { enumerable: true, get: function () { return bson_1.serialize; } });
Object.defineProperty(exports, "Timestamp", { enumerable: true, get: function () { return bson_1.Timestamp; } });
Object.defineProperty(exports, "UUID", { enumerable: true, get: function () { return bson_1.UUID; } });

function pluckBSONSerializeOptions(options) {
    const fieldsAsRaw = options && options.fieldsAsRaw ? options.fieldsAsRaw : {};
    const useBigInt64 = options && options.useBigInt64 !== undefined ? options.useBigInt64 : false;
    const promoteValues = options && options.promoteValues !== undefined ? options.promoteValues : true;
    const promoteBuffers = options && options.promoteBuffers !== undefined ? options.promoteBuffers : false;
    const promoteLongs = options && options.promoteLongs !== undefined ? options.promoteLongs : true;
    const serializeFunctions = options && options.serializeFunctions !== undefined ? options.serializeFunctions : false;
    const ignoreUndefined = options && options.ignoreUndefined !== undefined ? options.ignoreUndefined : false;
    const bsonRegExp = options && options.bsonRegExp !== undefined ? options.bsonRegExp : false;
    const raw = options && options.raw !== undefined ? options.raw : false;
    const enableUtf8Validation = options && options.enableUtf8Validation !== undefined ? options.enableUtf8Validation : true;

    return {
        fieldsAsRaw,
        useBigInt64,
        promoteValues,
        promoteBuffers,
        promoteLongs,
        serializeFunctions,
        ignoreUndefined,
        bsonRegExp,
        raw,
        enableUtf8Validation
    };
}

exports.pluckBSONSerializeOptions = pluckBSONSerializeOptions;

/**
 * Merge the given BSONSerializeOptions, preferring options over the parent's options, and
 * substituting defaults for values not set.
 *
 * @internal
 */
function resolveBSONOptions(options, parent) {
    const parentOptions = parent && parent.bsonOptions;
    return {
        raw: options && options.raw !== undefined ? options.raw : (parentOptions && parentOptions.raw) || false,
        useBigInt64: options && options.useBigInt64 !== undefined ? options.useBigInt64 : (parentOptions && parentOptions.useBigInt64) || false,
        promoteLongs: options && options.promoteLongs !== undefined ? options.promoteLongs : (parentOptions && parentOptions.promoteLongs) || true,
        promoteValues: options && options.promoteValues !== undefined ? options.promoteValues : (parentOptions && parentOptions.promoteValues) || true,
        promoteBuffers: options && options.promoteBuffers !== undefined ? options.promoteBuffers : (parentOptions && parentOptions.promoteBuffers) || false,
        ignoreUndefined: options && options.ignoreUndefined !== undefined ? options.ignoreUndefined : (parentOptions && parentOptions.ignoreUndefined) || false,
        bsonRegExp: options && options.bsonRegExp !== undefined ? options.bsonRegExp : (parentOptions && parentOptions.bsonRegExp) || false,
        serializeFunctions: options && options.serializeFunctions !== undefined ? options.serializeFunctions : (parentOptions && parentOptions.serializeFunctions) || false,
        fieldsAsRaw: options && options.fieldsAsRaw !== undefined ? options.fieldsAsRaw : (parentOptions && parentOptions.fieldsAsRaw) || {},
        enableUtf8Validation: options && options.enableUtf8Validation !== undefined ? options.enableUtf8Validation : (parentOptions && parentOptions.enableUtf8Validation) || true
    };
}

exports.resolveBSONOptions = resolveBSONOptions;

//# sourceMappingURL=bson.js.map
